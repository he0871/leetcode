class Solution:
    def __init__(self):
        self.memo = collections.defaultdict(int)
    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:
        if not jobDifficulty:
            return 0
        if  len(jobDifficulty) < d:
            return -1
        if len(jobDifficulty) == d:
            return sum(jobDifficulty)
        if d == 1:
            return max(jobDifficulty)
        if (len(jobDifficulty),d) in self.memo:
            return self.memo[(len(jobDifficulty),d)]
        
        prob = []
        room = len(jobDifficulty) - d + 2
        for i in range(1, room):
            # i indicates the cut point
            tm = max(jobDifficulty[:i]) + self.minDifficulty(jobDifficulty[i:], d - 1)
            prob.append(tm)
        self.memo[(len(jobDifficulty),d)] = min(prob)
        return min(prob)
